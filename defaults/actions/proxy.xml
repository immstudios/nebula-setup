<?xml version="1.0" encoding="UTF-8"?>
<settings>

    <pre><![CDATA[
global has_proxy
proxy_path = os.path.join("/mnt/proxy", get_base_name(asset["path"]) + ".mp4" )
if os.path.exists(proxy_path) and os.path.getmtime(proxy_path) > asset["file/mtime"]:
    logging.debug( "{} has proxy {}".format(asset, proxy_path))
    has_proxy = True
else:
    has_proxy = False
]]></pre>

    <allow_if>True</allow_if>
    <create_if><![CDATA[asset["content_type"] == VIDEO and asset["status"] == ONLINE]]></create_if>
    <start_if><![CDATA["video/codec" in asset.meta and asset["file/mtime"] < time.time() - 200]]></start_if>
    <skip_if><![CDATA[has_proxy]]></skip_if>

    <task mode="ffmpeg">
        <!-- pre is python script to be executed before transcoding -->
        <script><![CDATA[

tc_font = "/opt/nebula/support/RobotoMono-Medium.ttf"
tc_size = 18

try:
	logo_path = {
            "16/9" : "/opt/nebula/support/logo_16_9.png",
            "4/3" : "/opt/nebula/support/logo_4_3.png"
        }[asset["video/aspect_ratio"]]
except Exception:
    log_traceback()
    logo_path = "support/logo_4_3.png"

filter_array = []
filter_array.append("movie={}[watermark];[watermark]scale=720:576[watermark]".format(logo_path))
filter_array.append("[in]yadif=0:-1:0[out]")
filter_array.append("[out]scale=720:576[out]")
filter_array.append("[out][watermark]overlay=0:0[out]")

x="(w*0.1)"
y="(h*0.05)"

filter_array.append("[out]drawtext=fontfile={font}: timecode='{tc}': r={r}: \
    x={x}: y={y}: fontcolor=white: fontsize={font_size}: box=1: boxborderw=8: boxcolor=0x00000000@1[out]".format(
        tc=s2tc(asset.get("start_timecode", 0)).replace(":","\:"),
        r=asset["video/fps"],
        font=tc_font,
        font_size=tc_size,
        x=x,
        y=y
        )
    )

filters = ";".join(filter_array)
atracks = asset["audio_tracks"]

if not atracks:
    audio_mode = 0
elif atracks[0]['channels'] > 1:
    audio_mode = 1
elif len(atracks) > 1:
    audio_mode = 2
else:
    print (asset)
    print (asset.file_path)
    print (asset.meta)

]]></script>
        <!-- frame format -->
        <param name="filter:v">filters</param>
        <param name="s">"720x576"</param>
        <param name="r">25</param>
        <param name="pix_fmt">"yuv420p"</param>
        <param name="aspect">asset["video/aspect_ratio"].replace("/", ":")</param>

        <!-- video encoding -->
        <!--
        <param name="c:v">"libx264"</param>
        <param name="b:v">"1800k"</param>
        <param name="profile:v">"main"</param>
        <param name="preset:v">"medium"</param>
        <param name="level">"4.0"</param>
        <param name="g">50</param>
        <param name="x264opts">"keyint=50:min-keyint=50:no-scenecut"</param>
        -->
        <param name="c:v">"h264_nvenc"</param>:
        <param name="profile:v">"main"</param>
        <param name="preset:v">"medium"</param>
        <param name="level">"4.0"</param>
        <param name="g">50</param>

        <!-- audio settings -->
        <paramset condition="audio_mode > 0">
            <param name="c:a">"libfdk_aac"</param>
            <param name="b:a">"128k"</param>
            <param name="ar">48000</param>
        </paramset>

        <paramset condition="audio_mode == 1">
            <param name="map">"0:{}".format(asset["video/index"])</param>
            <param name="map">"0:{}".format(atracks[0]["index"])</param>
            <param name="filter:a">"pan=stereo:c0=c0:c1=c1"</param>
        </paramset>

        <paramset condition="audio_mode == 2">
            <param name="filter_complex">"[0:{}][0:{}]amerge=inputs=2[aout]".format(atracks[0]["index"], atracks[1]["index"])</param>
            <param name="map">"0:{}".format(asset["video/index"])</param>
            <param name="map">"[aout]"</param>
        </paramset>

        <param name="video_track_timescale">"25"</param>

        <output storage="2"><![CDATA[get_base_name(asset.file_path) + ".mp4"]]></output>
    </task>

<success><![CDATA[
tc_path = os.path.join("/mnt/proxy", get_base_name(asset["path"]) + ".xml" )
tc = s2tc(asset.get("start_timecode", 0))
if tc != "00:00:00:00":
    with open(tc_path, "w") as f:
        f.write("<IN>{}</IN>".format(tc))
]]></success>

</settings>
